<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="
        http://java.sun.com/xml/ns/javaee
        https://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">

         <!--
              配置启动 Spring IOC 容器的 Listener
              配置Listener启动需要的配置文件
          -->
        <context-param>
          <param-name>contextConfigLocation</param-name>
          <param-value>classpath:spring/spring-application.xml</param-value>
        </context-param>
        <listener>
          <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
        </listener>

        <!--
            html中form表单只支持GET与POST请求，而DELETE、PUT等method并不支持，
            spring3添加了一个过滤器 HiddenHttpMethodFilter，可以将这些请求转换为标准的http方法，
            使得支持GET、POST、PUT与DELETE请求。可以配置如下：

            在页面的form表单中设置method为Post，并添加一个如下的隐藏域：
            <input type="hidden" name="_method" value="put" />
        -->
        <filter>
          <filter-name>hiddenHttpMethodFilter</filter-name>
          <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
        </filter>
        <filter-mapping>
          <filter-name>hiddenHttpMethodFilter</filter-name>
          <url-pattern>/*</url-pattern>
        </filter-mapping>


        <!--配置字符编码,使用 UTF-8 -->
        <filter>
          <filter-name>encodingFilter</filter-name>
          <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
          <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
          </init-param>
          <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
          </init-param>
        </filter>

        <filter-mapping>
          <filter-name>encodingFilter</filter-name>
          <url-pattern>/*</url-pattern>
        </filter-mapping>

        <!-- 配置 dispatcherServlet -->
        <servlet>
            <servlet-name>dispatcherServlet</servlet-name>
            <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
            <!-- 配置 DispatcherServlet 的一个初始化参数: 配置 SpringMVC 配置文件的位置和名称 -->
            <init-param>
                <param-name>contextConfigLocation</param-name>
                <param-value>classpath:spring/spring-mvc.xml</param-value>
            </init-param>
            <!--项目启动时，就加载-->
            <load-on-startup>1</load-on-startup>
        </servlet>

        <servlet-mapping>
            <servlet-name>dispatcherServlet</servlet-name>
             <!--
                  拦截所有的请求
                   .jsp 页面可以正常访问
                   对于其它静态资源 .html,.js, .css,.png 等都不能访问到了，
                   需要在spring配置文件中，配置解决静态资源的问题
             -->
            <url-pattern>/</url-pattern>
        </servlet-mapping>

        <!--配置默认显示欢迎页面-->
        <welcome-file-list>
          <welcome-file>index.jsp</welcome-file>
        </welcome-file-list>
</web-app>